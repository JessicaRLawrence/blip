import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import corner



def plotmaker(lisa, params,parameters, npar):

    '''
    Make posterior plots from the samples generated by tge mcmc/nested sampling algorithm.

    Parameters
    -----------

    params : dictionary
        Dictionary of config params

    parameters: string
        Array or list of strings with names of the parameters

    npar : int
        Dimensionality of the parameter space
    '''

    post = np.loadtxt(params['out_dir'] + "/post_samples.txt")


    if len(params['truevals']) > 0:
        knowTrue = 1 ## Bit for whether we know the true vals or not
        truevals = params['truevals']
    else:
        knowTrue = 0


    plotrange = [0.999]*npar

    if params['out_dir'][-1] != '/':
        params['out_dir'] = params['out_dir'] + '/'

    ## Make corner plots
    fig = corner.corner(post, range=plotrange, labels=parameters, quantiles=(0.16, 0.84),
                        smooth=None, smooth1d=None, show_titles=True,
                        title_kwargs={"fontsize": 12},label_kwargs={"fontsize": 14},
                        fill_contours=True, use_math_text=True, )


    # Put correct values
    # Extract the axes
    axes = np.array(fig.axes).reshape((npar, npar))
    for ii in range(npar):
        ax = axes[ii, ii]

        ## Draw truevals if they exist
        if knowTrue:
            ax.axvline(truevals[ii], color="g", label='true value')

    ## Save posterior
    plt.savefig(params['out_dir'] + 'corners.png', dpi=150)
    print("Posteriors plots printed in " + params['out_dir'] + "corners.png")
    plt.close()


    ### Making spectral plots of the MAP values
    rec_vals   = np.median(post, axis=0)
    rec_omega  = 10**(rec_vals[1]) * (lisa.fdata/lisa.params['fref'])**rec_vals[0]
    true_omega = 10**(truevals[1]) * (lisa.fdata/lisa.params['fref'])**truevals[0]

    for ii in range(post[:, 0].size):

        aa = np.random.rand()
        if aa > 0.9:
            pt_omega  = 10**(post[ii, 1]) * (lisa.fdata/lisa.params['fref'])**post[ii, 0]
            plt.loglog(lisa.fdata, pt_omega, alpha=0.1, color='c')

    plt.loglog(lisa.fdata, rec_omega, label='median omega recovered')
    plt.loglog(lisa.fdata, true_omega, label='true_omega')
    plt.legend()
    plt.savefig(params['out_dir'] + 'omega_plot.png', dpi=150)
    print("omega plots printed in " + params['out_dir'] + "omega_plot.png")

